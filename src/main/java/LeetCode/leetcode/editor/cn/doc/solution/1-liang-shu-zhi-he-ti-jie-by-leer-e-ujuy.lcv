### 方法一，暴力枚举

**解题思路**

最容易想到的方法是枚举数组中的每一个数 $x$，寻找数组中是否存在 $\textit{target} - x$。

当用遍历整个数组的方式寻找 $\textit{target} - x$ 时，需要注意到每一个位于 $x$ 之前的元素都已经和 $x$ 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以只需要在 $x$ 后面的元素中寻找 $\textit{target} - x$。

[参考](https://leetcode.cn/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/)

### 代码

* []

```Java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[i] == target - nums[j]) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0];
    }
}
```

* []

```C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[i] == target - nums[j]) {
                    return {i, j};
                }
            }
        }
        return {};
    }
};
```

* []

```C
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    for (int i = 0; i < numsSize - 1; ++i) {
        for (int j = i + 1; j < numsSize; ++j) {
            if (nums[i] + nums[j] == target) {
                int* res = malloc(sizeof(int) * 2);
                res[0] = i, res[1] = j;
                *returnSize = 2;
                return res;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}
```

* []

```Python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        for i in range(n - 1):
            for j in range(i + 1, n):
                if nums[i] + nums[j] == target:
                    return [i, j]
        return []
```

* []

```Golang
func twoSum(nums []int, target int) []int {
    for i, x := range nums {
        for j := i + 1; j < len(nums); j++ {
            if x + nums[j] == target {
                return []int{i, j}
            }
        }
    }
    return nil
}
```

**复杂度分析**

- 时间复杂度：$O(N^2)$，其中 $N$ 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。

- 空间复杂度：$O(1)$。

### 方法二，哈希表

**解题思路**

注意到方法一的时间复杂度较高的原因是寻找 $\textit{target} - x$ 的时间复杂度过高。因此，需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，需要找出它的索引。

使用哈希表，可以将寻找 $\textit{target} - x$ 的时间复杂度降低到从 $O(N)$ 降低到 $O(1)$。

创建一个哈希表，对于每一个 $x$，首先查询哈希表中是否存在 $\textit{target} - x$，然后将 $x$ 插入到哈希表中，即可保证不会让 $x$ 和自己匹配。

[参考](https://leetcode.cn/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/)

### 代码

* []

```Java
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) {
                return new int[]{map.get(target - nums[i]), i};
            }
            map.put(nums[i], i);
        }
        return new int[0];
    }
}
```

* []

```C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> usmap;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            auto it = usmap.find(target - nums[i]);
            if (it != usmap.end()) {
                return {it->second, i};
            }
            usmap[nums[i]] = i;
        }
        return {};
    }
};
```

* []

```Python
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        d = dict()
        for i, num in enumerate(nums):
            if target - num in d:
                return [d[target - num], i]
            d[nums[i]] = i
        return []
```

* []

```Golang
func twoSum(nums []int, target int) []int {
    numMap := map[int]int{}
    for i, num := range nums {
        if p, ok := numMap[target - num]; ok {
            return []int{p, i}
        }
        numMap[nums[i]] = i
    }
    return nil
}
```

**复杂度分析**

- 时间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。对于每一个元素 $x$，可以 $O(1)$ 地寻找 $\textit{target} - x$。

- 空间复杂度：$O(N)$，其中 $N$ 是数组中的元素数量。主要为哈希表的开销。

